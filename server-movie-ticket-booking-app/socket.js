import { Server } from "socket.io";
import { protectSocket } from "./src/middleware/auth.middeware.js";

let io;

export function initSocket(server) {
  io = new Server(server, {
    cors: { origin: "*" },
    // TƒÉng timeout
    pingTimeout: 60000, // 60s (m·∫∑c ƒë·ªãnh 20s)
    pingInterval: 25000, // 25s (m·∫∑c ƒë·ªãnh 25s)
  });

  // D√πng middleware chung
  protectSocket(io);
  const userSockets = new Map(); // userId -> Set(socketIds)

  io.on("connection", (socket) => {
    const { userId, isAdmin } = socket;

    if (userId) {
      // Join room ri√™ng c·ªßa user
      socket.join(`user:${userId}`);
      console.log(`üë§ User ${userId} connected with socket ${socket.id}`);

      // Th√™m socket v√†o list
      if (!userSockets.has(userId)) {
        userSockets.set(userId, new Set());
      }
      userSockets.get(userId).add(socket.id);

      // N·∫øu l√† admin ‚Üí join room admin
      if (isAdmin) {
        socket.join("admins");
        console.log(`üõ†Ô∏è Admin ${userId} connected`);
      }
    }

    socket.on("disconnect", (reason) => {
      console.log(`‚ùå User ${userId} disconnected | socket: ${socket.id} | reason: ${reason}`);

      // X√≥a socket kh·ªèi map
      if (userSockets.has(userId)) {
        const sockets = userSockets.get(userId);
        sockets.delete(socket.id);
        if (sockets.size === 0) {
          userSockets.delete(userId);
          console.log(`üëã User ${userId} fully disconnected (no active tabs)`);
        }
      }
    });

    socket.on("error", (error) => {
      console.error(`‚ö†Ô∏è Socket error for user ${userId}:`, error);
    });
  });
}

export function getIO() {
  if (!io) throw new Error("Socket.io not initialized");
  return io;
}

export { io };
