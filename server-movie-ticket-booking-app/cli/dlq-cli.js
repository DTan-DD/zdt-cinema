#!/usr/bin/env node

import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
dotenv.config({ path: path.resolve(__dirname, "../.env") });
// Import sau khi ƒë√£ load .env
import { rabbitMQ } from "../configs/rabbitmqV2.config.js";
import { DLQRetryHandler } from "../src/services/workers/dlqRetry.service.js";

const command = process.argv[2];
const dlqName = process.argv[3] || "payment_queue.dlq";
const count = parseInt(process.argv[4]) || 10;

async function initConnection() {
  try {
    console.log("üîó Initializing RabbitMQ connection...");
    await rabbitMQ.init();
    console.log("‚úÖ RabbitMQ connected");
    console.log("üìä RabbitMQ status:", rabbitMQ.getStatus());
  } catch (error) {
    console.error("‚ùå Failed to connect to RabbitMQ:", error);
    process.exit(1);
  }
}

async function closeConnection() {
  try {
    // üî• FIX 2: ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi ƒë√≥ng ƒë·ªÉ ƒë·∫£m b·∫£o operations ho√†n th√†nh
    await new Promise((resolve) => setTimeout(resolve, 500));
    await rabbitMQ.close();
    console.log("üîå RabbitMQ connection closed");
  } catch (error) {
    console.error("‚ùå Error closing connection:", error.message);
  }
}

async function main() {
  try {
    // Kh·ªüi t·∫°o connection tr∆∞·ªõc
    await initConnection();

    switch (command) {
      case "inspect":
        console.log(`üîç [CLI] Inspecting queue: ${dlqName}`);
        const messages = await DLQRetryHandler.inspectDLQ(dlqName, parseInt(count));
        console.log(`üìã Found ${messages.length} messages in ${dlqName}:`);
        break;

      case "retry":
        const retriedCount = await DLQRetryHandler.retryMessage(dlqName, count);
        console.log(`‚úÖ Retried ${retriedCount} messages from ${dlqName}`);
        break;

      case "auto-retry":
        const results = await DLQRetryHandler.autoRetryWithBackoff(dlqName, count);
        console.log("üìä Auto-retry results:", results);
        break;

      case "purge":
        const purgedCount = await DLQRetryHandler.purgeDLQ(dlqName);
        console.log(`üßπ Purged ${purgedCount} messages from ${dlqName}`);
        break;

      case "status":
        const statusMessages = await DLQRetryHandler.inspectDLQ(dlqName, 1);
        console.log(`üìä ${dlqName}: ${statusMessages.length > 0 ? "HAS MESSAGES" : "EMPTY"}`);
        break;

      case "all-queues":
        await listAllQueues();
        break;

      case "queue-detail":
        // G·ªçi API thay v√¨ tr·ª±c ti·∫øp
        const apiResult = await fetch(`http://localhost:${process.env.PORT}/api/admin/dlq/queues/${dlqName}`);
        const data = await apiResult.json();
        console.log("üìã Queues from API:", JSON.stringify(data, null, 2));
        break;

      case "stats":
        // G·ªçi API thay v√¨ tr·ª±c ti·∫øp
        const statsResult = await fetch(`http://localhost:${process.env.PORT}/api/admin/dlq/stats`);
        const statsData = await statsResult.json();
        console.log("üìä Stats from API:", JSON.stringify(statsData, null, 2));
        break;

      default:
        showHelp();
    }
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    console.error(error.stack);
  } finally {
    // üî• FIX 3: ƒê√≥ng connection ƒë√∫ng c√°ch
    await closeConnection();
    // Force exit ƒë·ªÉ kh√¥ng b·ªã hang
    await new Promise((r) => setTimeout(r, 1500));
    process.exit(0);
  }
}

async function listAllQueues() {
  try {
    const status = rabbitMQ.getStatus();
    console.log("üìä RabbitMQ Status:");
    console.log("- Connected:", status.isConnected);
    console.log("- Channels:", status.channels.join(", "));
    console.log("- Reconnect attempts:", status.reconnectAttempts);

    // List c√°c queues c√≥ th·ªÉ c√≥
    const possibleQueues = ["payment_queue", "payment_queue.dlq", "mail_queue", "mail_queue.dlq", "noti_queue", "noti_queue.dlq"];

    console.log("\nüîç Checking queues:");
    for (const queue of possibleQueues) {
      try {
        const timestamp = Date.now();
        const { channel } = await rabbitMQ.createChannel(`check_${queue}_${timestamp}`, queue);
        const queueInfo = await channel.checkQueue(queue);
        console.log(`‚úÖ ${queue}: ${queueInfo.messageCount} messages`);
        await channel.close();
      } catch (error) {
        console.log(`‚ùå ${queue}: Not exists or error (${error.message})`);
      }
    }
  } catch (error) {
    console.error("‚ùå Error listing queues:", error.message);
  }
}

function showHelp() {
  console.log(`
üê∞ RabbitMQ DLQ Management CLI

Usage: node dlq-cli.js <command> [dlqName] [count]

Commands:
  inspect [dlqName] [limit]    - Xem messages trong DLQ
  retry [dlqName] [count]      - Retry messages t·ª´ DLQ
  auto-retry [dlqName] [max]   - Retry t·ª± ƒë·ªông v·ªõi max retries  
  purge [dlqName]              - X√≥a to√†n b·ªô DLQ
  status [dlqName]             - Check tr·∫°ng th√°i DLQ
  queues                       - List t·∫•t c·∫£ queues

Examples:
  node dlq-cli.js inspect noti_queue.dlq 5
  node dlq-cli.js retry mail_queue.dlq 3
  node dlq-cli.js auto-retry payment_queue.dlq 5
  node dlq-cli.js all-queues
  node dlq-cli.js queue-detail payment_queue
  node dlq-cli.js stats
  `);
}

// X·ª≠ l√Ω Ctrl+C
process.on("SIGINT", async () => {
  console.log("\nüõë Received Ctrl+C, shutting down...");
  await closeConnection();
  process.exit(0);
});

// X·ª≠ l√Ω uncaught errors
process.on("uncaughtException", async (error) => {
  console.error("üí• Uncaught Exception:", error);
  await closeConnection();
  process.exit(1);
});

process.on("unhandledRejection", async (reason, promise) => {
  console.error("üí• Unhandled Rejection at:", promise, "reason:", reason);
  await closeConnection();
  process.exit(1);
});

main().catch((error) => console.error("‚ùå Error:", error.message));
