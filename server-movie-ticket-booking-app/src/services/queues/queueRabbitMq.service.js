// queues/paymentQueue.js
import { getChannel } from "../../../configs/rabbitmq.config.js";

/**
 * üîπ H√†m publish job v√†o h√†ng ƒë·ª£i payment_queue
 * @param {Object} data - D·ªØ li·ªáu c·∫ßn x·ª≠ l√Ω (VD: bookingId, email, status)
 */
export const publishPaymentJob = async (data) => {
  try {
    const { channel, queue } = getChannel("payment");

    // Convert sang buffer ƒë·ªÉ g·ª≠i v√†o RabbitMQ
    const payload = Buffer.from(JSON.stringify(data));

    // G·ª≠i message v√†o queue
    const sent = await channel.sendToQueue(queue, payload, {
      persistent: true, // message kh√¥ng m·∫•t n·∫øu broker restart
    });

    if (sent) {
      console.log("‚úÖ [RabbitMQ] Payment job queued:", data);
    } else {
      console.warn("‚ö†Ô∏è [RabbitMQ] Failed to send payment job:", data);
    }
  } catch (error) {
    console.error("‚ùå [RabbitMQ] publishPaymentJob error:", error.message);
  }
};

// ‚úÖ Publish v√†o mail_queue (cho sendMail)
export const publishMailJob = async (data) => {
  try {
    const { channel, queue } = getChannel("mail"); // ‚ö° ƒê·ªïi sang "mail"
    const payload = Buffer.from(JSON.stringify(data));

    const sent = channel.sendToQueue(queue, payload, { persistent: true });

    if (sent) {
      console.log("‚úÖ [RabbitMQ] Mail job queued:", data);
    } else {
      console.warn("‚ö†Ô∏è [RabbitMQ] Failed to send mail job");
    }
  } catch (error) {
    console.error("‚ùå [RabbitMQ] publishMailJob error:", error.message);
  }
};

// ‚úÖ Publish v√†o noti_queue (cho sendNoti)
export const publishNotificationJob = async (data) => {
  try {
    const { channel, queue } = getChannel("noti"); // ‚ö° ƒê·ªïi sang "noti"
    const payload = Buffer.from(JSON.stringify(data));

    const sent = await channel.sendToQueue(queue, payload, { persistent: true });

    if (sent) {
      console.log("‚úÖ [RabbitMQ] Noti job queued:", data);
    } else {
      console.warn("‚ö†Ô∏è [RabbitMQ] Failed to send noti job");
    }
  } catch (error) {
    console.error("‚ùå [RabbitMQ] publishNotiJob error:", error.message);
  }
};
